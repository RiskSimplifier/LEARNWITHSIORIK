"""
Django settings for SiorikLearn project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import environ
import boto3
from storages.backends.s3boto3 import S3Boto3Storage

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

from dotenv import load_dotenv
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dd&d*tr037cx-4wtwx=8lvnu%g)bi-9pef)n_qav4r!q2ag$ao'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["learnwithsiorik.com","https://secureacceptance.cybersource.com/pay"]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
     'django.contrib.staticfiles',
    'app',
    'crispy_forms',
    'crispy_bootstrap5',
    'storages',
     "debug_toolbar",
     "CAMS_Res",
     'app.templatetags',
     "CAMS_Quiz",
     "chatbot",
     

]

CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'

CRISPY_TEMPLATE_PACK = 'bootstrap5'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    
    
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

ROOT_URLCONF = 'SiorikLearn.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SiorikLearn.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
#     '/home/siorikco/LEARNSIORIK/SiorikLearn/public/static',
# ]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY =env('AWS_SECRET_ACCESS_KEY')

AWS_STORAGE_BUCKET_NAME =env('AWS_STORAGE_BUCKET_NAME') 
AWS_S3_REGION_NAME =env('AWS_S3_REGION_NAME')

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# KEY_ID ="please fill in later"
# KEY_SECRET = "please fill in later"

#aws configuration


# Basic Storage configuration for Amazon S3 (Irrespective of Django versions)



#Configure Boto3 with the desired options
# AWS_S3_CONFIG = {
#     'max_pool_connections': 50,  # Adjust based on your requirements
#     # 'use_ssl': false,  # Set to False if not using SSL (not recommended unless your use case allows for it)
# }

# Create an S3 client with the specified configuration
s3 = boto3.client('s3',config=boto3.session.Config(max_pool_connections=50), endpoint_url='https://s3-accelerate.amazonaws.com')





AWS_S3_ACCELERATE = True
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'



# # Create an S3 client
# s3_client = boto3.client('s3', aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY, region_name=AWS_S3_REGION_NAME)

# # Enable Transfer Acceleration for the bucket
# response = s3_client.put_bucket_accelerate_configuration(
#     Bucket=AWS_STORAGE_BUCKET_NAME,
#     AccelerateConfiguration={'Status': 'Enabled'}
# )




AWS_QUERYSTRING_EXPIRE = 600

#<-----FOR CLOUDFRONT --->

# AWS_CLOUDFRONT_KEY_ID = env.str('AWS_CLOUDFRONT_KEY_ID').strip()

# AWS_CLOUDFRONT_KEY = env.str('AWS_CLOUDFRONT_KEY', multiline=True).encode('ascii').strip()
# cloudfront_add ="d2m13znqldbvol.cloudfront.net"
# AWS_S3_CUSTOM_DOMAIN =f'{cloudfront_add}/{AWS_STORAGE_BUCKET_NAME}'
# AWS_S3_ENDPOINT_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}'
#                                  # AWS_QUERYSTRING_AUTH = False
# Set the URL for media and static files
# MEDIA_URL = '/Media/'
# MEDIA_ROOT = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/Media/'

AWS_QUERYSTRING_EXPIRE = 600

# AWS_CLOUDFRONT_KEY_ID = env.str('AWS_CLOUDFRONT_KEY_ID').strip()

# AWS_CLOUDFRONT_KEY = env.str('AWS_CLOUDFRONT_KEY', multiline=True).encode('ascii').strip()

#AWS_S3_CUSTOM_DOMAIN ="d2m13znqldbvol.cloudfront.net"
AWS_S3_ENDPOINT_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
# AWS_QUERYSTRING_AUTH = False
# Set the URL for media and static files
MEDIA_URL = '/Media/'
MEDIA_ROOT = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/Media/'
# STATIC_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/static/'
#MEDIA_URL = f'https://WS_S3_CUSTOM_DOMAIN/Media/'


CYBERSOURCE_PROFILE_ID1=env('CYBERSOURCE_PROFILE_ID1')
CYBERSOURCE_ACCESS_KEY1=env('CYBERSOURCE_ACCESS_KEY1')
CYBERSOURCE_SECRET_KEY1=env('CYBERSOURCE_SECRET_KEY1')



openai_api_key=env('openai_api_key')